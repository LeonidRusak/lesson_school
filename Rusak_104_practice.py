# Задача 1

def BMI():  # Функция для определения индекса массы тела
    growth = int(input('Введите свой рост в сантиметрах: ')) / 100
    weight = int(input('Введите свой вес в килограммах: '))
    bmi = round(weight / (growth ** 2), 1)
    print(f'Ваш индекс массы тела {bmi}')
    if bmi < 18.5:
        print('Недостаточная масса тела',
              f'Вам необходимо набрать {int((18.5 - bmi) * growth**2)} килограмм', sep='\n')
    elif 18.5 <= bmi <= 25:
        print('Норма! Вы супер!!!')
    elif bmi > 25:
        print('Избыточная масса тела',
              f'Вам необходимо похудеть на {int((bmi - 25) * growth**2)} килограмм', sep='\n')


BMI()


# Задача 2

def figure(side):  # Функция для определения фигуры по количеству сторон
    dict_figure = {3: 'треугольник', 4: 'прямоугольник', 5: 'пентагон', 6: 'гексагон', 7: 'гептагон',
                   8: 'октагон', 9: 'нонагон', 10: 'декагон'}
    if side in dict_figure:
        return f'Ваша фигура {dict_figure[side]}'
    else:
        return 'Такая фигура не задана'


print(figure(int(input('Введите количество сторон в фигуре: '))))


# Задача 3

def tomorrow():  # Функция возвращающая дату, следующую за введенной
    day_ = int(input('День: '))
    month_ = input('Месяц (прим. январь): ')
    year_ = int(input('Год: '))
    day_in_month = {'январь': 31, 'февраль': 28, 'март': 31, 'апрель': 30, 'май': 31, 'июнь': 30,
                    'июль': 31, 'август': 31, 'сентябрь': 30, 'октябрь': 31, 'ноябрь': 30, 'декабрь': 31}
    list_month = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь',
                  'ноябрь', 'декабрь']

    """В первую очередь проверим не является ли введенная дата 28 февраля високосного года"""
    if day_ == 28 and month_ == 'февраль' and (year_ % 4 == 0 and year_ % 100 != 0 or year_ % 400 == 0):
        return f'{day_ + 1} {month_} {year_}'
    else:
        day_ += 1
        if day_ > day_in_month[month_]:  # Проверка не является ли введенный день, последним днем месяца
            day_ = 1
            if list_month.index(month_) != 11:
                month_ = list_month[list_month.index(month_) + 1]
            else:
                month_ = list_month[0]  # Если введенная дата 31 декабря, то отмечаем Новый Год и переходим в следующий
                year_ += 1
                return f'С НОВЫМ ГОДОМ!!! \n {day_} {month_} {year_}'
        return f'{day_} {month_} {year_}'


print(tomorrow())


# Задача 4

def delivery(all_):  # Функция возвращающая стоимость доставки товара
    if all_ == 1:
        return f'Общая сумма доставки за {all_} товаров составит 10.92$'
    elif all_ > 1:
        return f'Общая сумма доставки за {all_} товаров составит {10.95 + (all_ - 1) * 2.95}$'
    else:
        return 'Неправильно введено количество товара'


print(delivery(int(input('Введите количество заказываемого товара: '))))


# Задача 5

def division(a, b):  # Функция возвращающая сокращенные числитель и знаменатель дроби
    for i in range(a + 1, 1, -1):  # Поиск наибольшего общего кратного числа и сокращение числителя и знаменалеля
        if a % i == 0 and b % i == 0:
            a /= i
            b /= i
            return int(a), int(b)


print(division(6, 10))


# Задача 6

list_6 = [1, 2, 2, 3, 'qwe', 'rty', 4, 7, 6, 'uio', 12, 7, 13, 14, 3, 55]


def list__(list_):
    a = list_.copy()
    a.reverse()  # Список в перевернутом виде
    b = []  # Список в порядке убывания
    for i in list_:
        if type(i) == int:
            b.append(i)
    b.sort(reverse=True)
    c = b.copy()
    c.reverse()  # Список в порядке возврастания
    d = list_[1:7]  # Срез списка от 2 до 7 элемента
    e = list_.copy()
    e.pop(4)  # Список с удаленным 5 элементом
    f = list_.copy()
    for i in f:
        if f.count(i) > 1:
            f.remove(i)  # Список без дубликатов
    g = []  # Список без чисел
    for i in list_:
        if type(i) != int:
            g.append(i)

    print(a, b, c, d, e, f, g, sep='\n')


list__(list_6)

# Задача 7


def count_range(a, min_, max_):  # Функция возвращающая количество элементов в списке, входящих в заданный диапазон
    x = 0
    for i in a:
        if min_ <= i < max_:
            x += 1
    return x


list_a = [1, 2, 3.12, 4.74, 67, 78, 55.3]
list_b = [1, 1.2, 3, 5.5, 5.6, 6, 7, 7, 5]

print(count_range(list_a, 2, 5))
print(count_range(list_b, 2, 6))


# Задача 8

def list_8(a):  # Функция возваращающая количество подсписков в исходном списке
    x = 0
    for i in a:
        if type(i) == list:
            x += 1
    return x


list_88 = [1, 'rty', [3], [1, 2, 3], 4, [3, 5], [5, 6], 23, 'qwe']
print(f'Количество подсписков {list_8(list_88)}')


# Задача 9

def annagram(a, b):  # Функция проверяющая являются ли два слова анаграммой
    if len(a) == len(b):
        for i in a:
            if i not in b:
                return 'Слова не являются анаграммой'
            else:
                return 'Слова анаграмма'
    else:
        return 'Разная длина слов'


print(annagram(input('Введите первое слово: '), input('Введите второе слово: ')))


# Задача 10

def phone(a):  # Функция возвращающая комбинацию кнопок, для появления определенного текста на экране телефона
    phone_dict = {'a': 2, 'b': 22, 'c': 222, 'd': 3, 'e': 33, 'f': 333, 'g': 4, 'h': 44, 'i': 444,
                  'j': 5, 'k': 55, 'l': 555, 'm': 6, 'n': 66, 'o': 666, 'p': 7, 'q': 77, 'r': 777, 's': 7777,
                  't': 8, 'u': 88, 'v': 888, 'w': 9, 'x': 99, 'y': 999, 'z': 9999, ' ': 0, '.': 1, ',': 11,
                  '?': 111, '!': 1111, ':': 11111}
    phone_list = []
    for i in a:
        phone_list.append(phone_dict[i])
    print(*phone_list, sep='')


phone(input('Введите строку: ').lower())


# Задача 11

list__a = [1, [2, 3], [4, [5, [6, 7]]], [[[8], 9], [10]]]


def alignment_list(list_, new_list=[]):
    # В параметрах исходный список и пустой список для возврата в нем элементов из исходного списка
    for i in list_:
        if isinstance(i, list):  # Если i является списком, то вызываем опять функцию но с исходным списком i
            alignment_list(i)
        else:
            new_list.append(i)
    return new_list


print(alignment_list(list__a))
